코드리뷰 2차  
최근 클린코드를 다시 보면서 이름을 짓는 것에 대해 중요성을 느낀다.  
 
네이밍시 create 같은 생성하는 느낌의 함축적인 의미를 네이밍 할때 새로운 user와 같이 명확한 의미를 표현한다면 좋지만.

```{.java}
    Long userId = service.createUserId();
	}
```

주석을 생성할 때도 같은 create 같은 의미를 쓴다면 코드를 읽는 입장에서 당황스러울 수 있다.

```{.java}
    service.createUserIdLog();
    service.createUserId();
	}
```

스코프 안에 level을 생각하자 같은 변수를 스코프에서 나누어서 사용하자.
스코프 level별 수준에 따라 log출력을 확인한다. 

Try-Catch-Finally 사용시 DB에 작업하는 내용이 있을 때 Finally에 떨어지는 내용을 맹신 하면 안된다.  
혹시 DB커넥션 err, bander와의 통신이 끊어진 경우에 Finally로 떨어지기 때문에 어떤 내용으로 Finally에 내용 확인이 필요하다.    


공통적으로 log를 뿌리는 내용이 중첩되어 aop로 통합하여 서비스 메소드를 나누어 하는 편은 어떤지 질문하였다.  

-> aop : log는 debug용도로 사용하고 비지니스 log에는 적합하지 않다.  

공통 log로 묶어서 하면 어떻게 될까요?  

-> 공통 log시 관리의 편함은 있지만 어느부분에서 정확하게 발생했는지 확인이 어렵다. 메소드를 참조하는 부분이 여러 곳 일 경우도 많다.  
 
각 서비스를 개발시 시스템의 한계점을 꼭 잡아두고 개발히야 한다.

혹시 이 부분을 지나쳤다면 오픈하고 모니터링 하면서 한계치를 확인하는 방법이 있다.